# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MemberHome.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector
from PyMongo import *
from SearchResults import Ui_MainWindow as searchresults
from MakePayment import Ui_MainWindow as makepayment
from ChangePassword import Ui_MainWindow as changepassword
from BookResult import Ui_MainWindow as bookresult




my_db = mysql.connector.connect(host="localhost",
                                user="root",
                                passwd="RunningMan7012",
                                database="ils",
                                autocommit=True)

my_cursor = my_db.cursor()

class Ui_MainWindow(object):
        def __init__(self,details,MainWindow,loginWindow):
                self.loginWindow = loginWindow
                self.details = details
                self.emailid = details
                self.MainWindow = MainWindow
                self.name = self.get_username(self.details)
                self.setupUi(self.MainWindow)
                self.load_fines(self.details)
                self.load_borrow_books(details)
                self.load_reservations(self.details)
                self.load_account_details(self.details)
                self.MainWindow.show()
                self.groupBox_5.hide()
                self.advance_indicator = False
                self.borrowtable_clicked = False
                self.reservedtable_clicked = False

        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(1060, 659)
                MainWindow.setStyleSheet("")
                MainWindow.setDocumentMode(False)
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                self.label_7 = QtWidgets.QLabel(self.centralwidget)
                self.label_7.setGeometry(QtCore.QRect(390, 230, 58, 16))
                self.label_7.setText("")
                self.label_7.setObjectName("label_7")
                self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
                self.tabWidget.setEnabled(True)
                self.tabWidget.setGeometry(QtCore.QRect(0, -1, 1061, 641))
                font = QtGui.QFont()
                font.setFamily("Raleway SemiBold")
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.tabWidget.setFont(font)
                self.tabWidget.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
                self.tabWidget.setStyleSheet("")
                self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
                self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
                self.tabWidget.setIconSize(QtCore.QSize(25, 25))
                self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
                self.tabWidget.setUsesScrollButtons(True)
                self.tabWidget.setDocumentMode(False)
                self.tabWidget.setTabsClosable(False)
                self.tabWidget.setMovable(False)
                self.tabWidget.setTabBarAutoHide(False)
                self.tabWidget.setObjectName("tabWidget")
                self.tabHome = QtWidgets.QWidget()
                self.tabHome.setObjectName("tabHome")
                self.home_finesBtn = QtWidgets.QPushButton(self.tabHome)
                self.home_finesBtn.setGeometry(QtCore.QRect(530, 420, 521, 191))
                self.home_finesBtn.setStyleSheet("background-image: url(:/Assets/assets/4.jpg);")
                self.home_finesBtn.setText("")
                self.home_finesBtn.setObjectName("home_finesBtn")
                self.home_heroImage = QtWidgets.QLabel(self.tabHome)
                self.home_heroImage.setGeometry(QtCore.QRect(0, 0, 1051, 231))
                self.home_heroImage.setStyleSheet("background-image: url(:/Assets/assets/Welcome to Integrated Library System.jpg);\n"
                "")
                self.home_heroImage.setText("")
                self.home_heroImage.setObjectName("home_heroImage")
                self.home_accountBtn = QtWidgets.QPushButton(self.tabHome)
                self.home_accountBtn.setGeometry(QtCore.QRect(530, 230, 521, 191))
                self.home_accountBtn.setStyleSheet("background-image: url(:/Assets/assets/2.jpg);")
                self.home_accountBtn.setText("")
                self.home_accountBtn.setObjectName("home_accountBtn")
                self.home_borrowBtn = QtWidgets.QPushButton(self.tabHome)
                self.home_borrowBtn.setGeometry(QtCore.QRect(0, 420, 531, 191))
                self.home_borrowBtn.setStyleSheet("background-image: url(:/Assets/assets/3.jpg);")
                self.home_borrowBtn.setText("")
                self.home_borrowBtn.setObjectName("home_borrowBtn")
                self.home_searchBtn = QtWidgets.QPushButton(self.tabHome)
                self.home_searchBtn.setGeometry(QtCore.QRect(0, 230, 531, 191))
                self.home_searchBtn.setStyleSheet("\n"
                "background-image: url(:/Assets/assets/1.jpg);\n"
                "")
                self.home_searchBtn.setText("")
                self.home_searchBtn.setObjectName("home_searchBtn")
                self.tabWidget.addTab(self.tabHome, "")
                self.tab_Search = QtWidgets.QWidget()
                self.tab_Search.setObjectName("tab_Search")
                self.search_searchBtn = QtWidgets.QPushButton(self.tab_Search)
                self.search_searchBtn.setGeometry(QtCore.QRect(350, 330, 171, 51))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(12)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.search_searchBtn.setFont(font)
                self.search_searchBtn.setStyleSheet("border: 1px solid white;\n"
                "border-radius: 5px;\n"
                "color: white;\n"
                "background-color:  #536DFE;\n"
                "box-shadow: 5px 10px #888888;\n"
                "\n"
                "")
                self.search_searchBtn.setObjectName("search_searchBtn")
                self.label_3 = QtWidgets.QLabel(self.tab_Search)
                self.label_3.setGeometry(QtCore.QRect(0, 130, 1051, 121))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.label_3.setFont(font)
                self.label_3.setStyleSheet("")
                self.label_3.setObjectName("label_3")
                self.line = QtWidgets.QFrame(self.tab_Search)
                self.line.setGeometry(QtCore.QRect(330, 230, 391, 16))
                self.line.setFrameShape(QtWidgets.QFrame.HLine)
                self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line.setObjectName("line")
                self.label_9 = QtWidgets.QLabel(self.tab_Search)
                self.label_9.setGeometry(QtCore.QRect(470, 200, 58, 16))
                self.label_9.setText("")
                self.label_9.setObjectName("label_9")
                self.graphicsView = QtWidgets.QGraphicsView(self.tab_Search)
                self.graphicsView.setGeometry(QtCore.QRect(0, 0, 1131, 640))
                self.graphicsView.setLayoutDirection(QtCore.Qt.LeftToRight)
                self.graphicsView.setStyleSheet("background-image: url(:/Assets/assets/bookshelf_search.jpg);\n"
                "background-size: contain, cover;")
                self.graphicsView.setObjectName("graphicsView")
                self.search_title = QtWidgets.QLineEdit(self.tab_Search)
                self.search_title.setGeometry(QtCore.QRect(220, 260, 621, 51))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(11)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.search_title.setFont(font)
                self.search_title.setLayoutDirection(QtCore.Qt.LeftToRight)
                self.search_title.setAutoFillBackground(False)
                self.search_title.setStyleSheet("background-color: white;\n"
                "color: black;\n"
                "border: 1px solid white;\n"
                "border-radius: 6px;\n"
                "box-shadow: 5px 10px #000;")
                self.search_title.setMaxLength(32770)
                self.search_title.setFrame(True)
                self.search_title.setAlignment(QtCore.Qt.AlignCenter)
                self.search_title.setObjectName("search_title")
                self.groupBox_5 = QtWidgets.QGroupBox(self.tab_Search)
                self.groupBox_5.setGeometry(QtCore.QRect(360, 400, 341, 181))
                font = QtGui.QFont()
                font.setFamily("Raleway SemiBold")
                self.groupBox_5.setFont(font)
                self.groupBox_5.setObjectName("groupBox_5")
                self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_5)
                self.groupBox_4.setGeometry(QtCore.QRect(0, 140, 341, 31))
                self.groupBox_4.setTitle("")
                self.groupBox_4.setObjectName("groupBox_4")
                self.label_11 = QtWidgets.QLabel(self.groupBox_4)
                self.label_11.setGeometry(QtCore.QRect(10, 8, 58, 16))
                font = QtGui.QFont()
                font.setFamily("Raleway Light")
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.label_11.setFont(font)
                self.label_11.setObjectName("label_11")
                self.search_isbn = QtWidgets.QLineEdit(self.groupBox_4)
                self.search_isbn.setGeometry(QtCore.QRect(90, 6, 241, 21))
                self.search_isbn.setObjectName("search_isbn")
                self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox_5)
                self.groupBox_3.setGeometry(QtCore.QRect(0, 100, 341, 31))
                self.groupBox_3.setTitle("")
                self.groupBox_3.setObjectName("groupBox_3")
                self.label_10 = QtWidgets.QLabel(self.groupBox_3)
                self.label_10.setGeometry(QtCore.QRect(10, 8, 121, 16))
                font = QtGui.QFont()
                font.setFamily("Raleway Light")
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.label_10.setFont(font)
                self.label_10.setObjectName("label_10")
                self.search_year = QtWidgets.QLineEdit(self.groupBox_3)
                self.search_year.setGeometry(QtCore.QRect(130, 6, 201, 21))
                self.search_year.setObjectName("search_year")
                self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox_5)
                self.groupBox_2.setGeometry(QtCore.QRect(0, 60, 341, 31))
                self.groupBox_2.setTitle("")
                self.groupBox_2.setObjectName("groupBox_2")
                self.label_5 = QtWidgets.QLabel(self.groupBox_2)
                self.label_5.setGeometry(QtCore.QRect(10, 8, 71, 16))
                font = QtGui.QFont()
                font.setFamily("Raleway Light")
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.label_5.setFont(font)
                self.label_5.setObjectName("label_5")
                self.search_category = QtWidgets.QLineEdit(self.groupBox_2)
                self.search_category.setGeometry(QtCore.QRect(90, 6, 241, 21))
                self.search_category.setObjectName("search_category")
                self.groupBox = QtWidgets.QGroupBox(self.groupBox_5)
                self.groupBox.setGeometry(QtCore.QRect(0, 20, 341, 31))
                self.groupBox.setTitle("")
                self.groupBox.setObjectName("groupBox")
                self.label = QtWidgets.QLabel(self.groupBox)
                self.label.setGeometry(QtCore.QRect(10, 8, 58, 16))
                font = QtGui.QFont()
                font.setFamily("Raleway Light")
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.label.setFont(font)
                self.label.setObjectName("label")
                self.search_author = QtWidgets.QLineEdit(self.groupBox)
                self.search_author.setGeometry(QtCore.QRect(90, 6, 241, 21))
                self.search_author.setObjectName("search_author")
                self.search_advancedBtn = QtWidgets.QPushButton(self.tab_Search)
                self.search_advancedBtn.setGeometry(QtCore.QRect(540, 330, 171, 51))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(12)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.search_advancedBtn.setFont(font)
                self.search_advancedBtn.setStyleSheet("border: 1px solid #fff;\n"
                "border-radius: 5px;\n"
                "color: black;\n"
                "background-color:  white;\n"
                "box-shadow: 5px 10px #888888;\n"
                "\n"
                "")
                self.search_advancedBtn.setObjectName("search_advancedBtn")
                self.label_17 = QtWidgets.QLabel(self.tab_Search)
                self.label_17.setGeometry(QtCore.QRect(410, 30, 201, 131))
                self.label_17.setStyleSheet("image: url(:/Assets/assets/searching.svg);")
                self.label_17.setText("")
                self.label_17.setObjectName("label_17")
                self.graphicsView.raise_()
                self.search_searchBtn.raise_()
                self.label_3.raise_()
                self.line.raise_()
                self.label_9.raise_()
                self.search_title.raise_()
                self.groupBox_5.raise_()
                self.search_advancedBtn.raise_()
                self.label_17.raise_()
                self.tabWidget.addTab(self.tab_Search, "")
                self.tab_Fines = QtWidgets.QWidget()
                self.tab_Fines.setObjectName("tab_Fines")
                self.payment_heroImage = QtWidgets.QLabel(self.tab_Fines)
                self.payment_heroImage.setGeometry(QtCore.QRect(0, 0, 1061, 631))
                self.payment_heroImage.setStyleSheet("background-image: url(:/Assets/assets/Payment.jpg);\n"
                "")
                self.payment_heroImage.setText("")
                self.payment_heroImage.setObjectName("payment_heroImage")
                self.label_20 = QtWidgets.QLabel(self.tab_Fines)
                self.label_20.setGeometry(QtCore.QRect(410, 40, 201, 131))
                self.label_20.setStyleSheet("image: url(:/Assets/assets/payments.svg);")
                self.label_20.setText("")
                self.label_20.setObjectName("label_20")
                self.label_21 = QtWidgets.QLabel(self.tab_Fines)
                self.label_21.setGeometry(QtCore.QRect(0, 130, 1051, 121))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.label_21.setFont(font)
                self.label_21.setStyleSheet("")
                self.label_21.setObjectName("label_21")
                self.line_4 = QtWidgets.QFrame(self.tab_Fines)
                self.line_4.setGeometry(QtCore.QRect(330, 240, 391, 16))
                self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
                self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line_4.setObjectName("line_4")
                self.payment_makePayment = QtWidgets.QPushButton(self.tab_Fines)
                self.payment_makePayment.setGeometry(QtCore.QRect(540, 340, 211, 41))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(12)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.payment_makePayment.setFont(font)
                self.payment_makePayment.setStyleSheet("border: 2px solid #ff445c;\n"
                "border-radius: 10px;\n"
                "background-color: #ff445c;\n"
                "color: white;\n"
                "font-weight: bold;\n"
                "padding-bottom: 2px;\n"
                "")
                self.payment_makePayment.setObjectName("payment_makePayment")
                self.payment_totalOverdue = QtWidgets.QLabel(self.tab_Fines)
                self.payment_totalOverdue.setGeometry(QtCore.QRect(340, 280, 221, 51))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(14)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.payment_totalOverdue.setFont(font)
                self.payment_totalOverdue.setStyleSheet("color: white;")
                self.payment_totalOverdue.setObjectName("payment_totalOverdue")
                self.payment_totalOverdue_2 = QtWidgets.QLabel(self.tab_Fines)
                self.payment_totalOverdue_2.setGeometry(QtCore.QRect(570, 280, 121, 51))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(14)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.payment_totalOverdue_2.setFont(font)
                self.payment_totalOverdue_2.setStyleSheet("color: white;")
                self.payment_totalOverdue_2.setAlignment(QtCore.Qt.AlignCenter)
                self.payment_totalOverdue_2.setObjectName("payment_totalOverdue_2")
                self.tabWidget.addTab(self.tab_Fines, "")
                self.tab_Borrow = QtWidgets.QWidget()
                self.tab_Borrow.setObjectName("tab_Borrow")
                self.borrow_heroImage_2 = QtWidgets.QLabel(self.tab_Borrow)
                self.borrow_heroImage_2.setGeometry(QtCore.QRect(-4, 2, 1061, 631))
                self.borrow_heroImage_2.setStyleSheet("background-image: url(:/Assets/assets/Borrow.jpg);")
                self.borrow_heroImage_2.setText("")
                self.borrow_heroImage_2.setObjectName("borrow_heroImage_2")
                self.line_3 = QtWidgets.QFrame(self.tab_Borrow)
                self.line_3.setGeometry(QtCore.QRect(330, 240, 391, 16))
                self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
                self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line_3.setObjectName("line_3")
                self.borrow_heroImage = QtWidgets.QLabel(self.tab_Borrow)
                self.borrow_heroImage.setGeometry(QtCore.QRect(0, 130, 1051, 121))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.borrow_heroImage.setFont(font)
                self.borrow_heroImage.setStyleSheet("")
                self.borrow_heroImage.setObjectName("borrow_heroImage")
                self.borrowTable = QtWidgets.QTableWidget(self.tab_Borrow)
                self.borrowTable.setGeometry(QtCore.QRect(20, 280, 1011, 331))
                self.borrowTable.setStyleSheet("")
                self.borrowTable.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.borrowTable.setMidLineWidth(0)
                self.borrowTable.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
                self.borrowTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
                self.borrowTable.setTabKeyNavigation(True)
                self.borrowTable.setProperty("showDropIndicator", False)
                self.borrowTable.setDragDropOverwriteMode(False)
                self.borrowTable.setAlternatingRowColors(False)
                self.borrowTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
                self.borrowTable.setShowGrid(True)
                self.borrowTable.setGridStyle(QtCore.Qt.SolidLine)
                self.borrowTable.setObjectName("borrowTable")
                self.borrowTable.setColumnCount(5)
                self.borrowTable.setRowCount(0)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                item.setFont(font)
                self.borrowTable.setHorizontalHeaderItem(0, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                item.setFont(font)
                self.borrowTable.setHorizontalHeaderItem(1, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                item.setFont(font)
                brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
                brush.setStyle(QtCore.Qt.SolidPattern)
                item.setForeground(brush)
                self.borrowTable.setHorizontalHeaderItem(2, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                item.setFont(font)
                self.borrowTable.setHorizontalHeaderItem(3, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                item.setFont(font)
                self.borrowTable.setHorizontalHeaderItem(4, item)
                self.borrowTable.horizontalHeader().setCascadingSectionResizes(False)
                self.borrowTable.horizontalHeader().setHighlightSections(True)
                self.label_18 = QtWidgets.QLabel(self.tab_Borrow)
                self.label_18.setGeometry(QtCore.QRect(410, 30, 201, 131))
                self.label_18.setStyleSheet("image: url(:/Assets/assets/searching.svg);")
                self.label_18.setText("")
                self.label_18.setObjectName("label_18")
                self.extend_due_date = QtWidgets.QPushButton(self.tab_Borrow)
                self.extend_due_date.setGeometry(QtCore.QRect(810, 180, 211, 41))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(12)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.extend_due_date.setFont(font)
                self.extend_due_date.setStyleSheet("border: 2px solid white;\n"
                "border-radius: 5px;\n"
                "background-color: white;\n"
                "color: black;\n"
                "font-weight: bold;\n"
                "padding-bottom: 2px;\n"
                "")
                self.extend_due_date.setObjectName("extend_due_date")
                self.return_book = QtWidgets.QPushButton(self.tab_Borrow)
                self.return_book.setGeometry(QtCore.QRect(810, 230, 211, 41))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(12)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.return_book.setFont(font)
                self.return_book.setStyleSheet("border: 2px solid #ff445c;\n"
                "border-radius: 10px;\n"
                "background-color: #ff445c;\n"
                "color: white;\n"
                "font-weight: bold;\n"
                "padding-bottom: 2px;\n"
                "")
                self.return_book.setObjectName("return_book")
                self.tabWidget.addTab(self.tab_Borrow, "")
                self.tab_Reservations = QtWidgets.QWidget()
                self.tab_Reservations.setObjectName("tab_Reservations")
                self.reservationTable = QtWidgets.QTableWidget(self.tab_Reservations)
                self.reservationTable.setGeometry(QtCore.QRect(20, 280, 1011, 331))
                self.reservationTable.setStyleSheet("")
                self.reservationTable.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
                self.reservationTable.setTabKeyNavigation(True)
                self.reservationTable.setProperty("showDropIndicator", False)
                self.reservationTable.setDragDropOverwriteMode(False)
                self.reservationTable.setAlternatingRowColors(False)
                self.reservationTable.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
                self.reservationTable.setShowGrid(True)
                self.reservationTable.setGridStyle(QtCore.Qt.SolidLine)
                self.reservationTable.setObjectName("reservationTable")
                self.reservationTable.setColumnCount(5)
                self.reservationTable.setRowCount(0)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                item.setFont(font)
                self.reservationTable.setHorizontalHeaderItem(0, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                item.setFont(font)
                self.reservationTable.setHorizontalHeaderItem(1, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                item.setFont(font)
                self.reservationTable.setHorizontalHeaderItem(2, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                item.setFont(font)
                brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
                brush.setStyle(QtCore.Qt.SolidPattern)
                item.setForeground(brush)
                self.reservationTable.setHorizontalHeaderItem(3, item)
                item = QtWidgets.QTableWidgetItem()
                item.setTextAlignment(QtCore.Qt.AlignCenter)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                item.setFont(font)
                self.reservationTable.setHorizontalHeaderItem(4, item)
                self.reservationTable.horizontalHeader().setCascadingSectionResizes(False)
                self.reservationTable.horizontalHeader().setHighlightSections(True)
                self.label_6 = QtWidgets.QLabel(self.tab_Reservations)
                self.label_6.setGeometry(QtCore.QRect(0, 120, 1051, 121))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.label_6.setFont(font)
                self.label_6.setStyleSheet("")
                self.label_6.setObjectName("label_6")
                self.line_2 = QtWidgets.QFrame(self.tab_Reservations)
                self.line_2.setGeometry(QtCore.QRect(330, 230, 391, 16))
                self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
                self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line_2.setObjectName("line_2")
                self.reservations_heroImage = QtWidgets.QLabel(self.tab_Reservations)
                self.reservations_heroImage.setGeometry(QtCore.QRect(0, 0, 1051, 631))
                self.reservations_heroImage.setStyleSheet("background-image: url(:/Assets/assets/Reservationsjpg.jpg)")
                self.reservations_heroImage.setText("")
                self.reservations_heroImage.setObjectName("reservations_heroImage")
                self.label_19 = QtWidgets.QLabel(self.tab_Reservations)
                self.label_19.setGeometry(QtCore.QRect(430, 30, 201, 131))
                self.label_19.setStyleSheet("\n"
                "image: url(:/Assets/assets/reserve.svg);")
                self.label_19.setText("")
                self.label_19.setObjectName("label_19")
                self.reservation_cancelReservation = QtWidgets.QPushButton(self.tab_Reservations)
                self.reservation_cancelReservation.setGeometry(QtCore.QRect(820, 230, 211, 41))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(12)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.reservation_cancelReservation.setFont(font)
                self.reservation_cancelReservation.setStyleSheet("border: 2px solid white;\n"
                "border-radius: 5px;\n"
                "background-color: white;\n"
                "color: black;\n"
                "font-weight: bold;\n"
                "padding-bottom: 2px;\n"
                "")
                self.reservation_cancelReservation.setObjectName("reservation_cancelReservation")
                self.reservations_heroImage.raise_()
                self.reservationTable.raise_()
                self.label_6.raise_()
                self.line_2.raise_()
                self.label_19.raise_()
                self.reservation_cancelReservation.raise_()
                self.tabWidget.addTab(self.tab_Reservations, "")
                self.tab_Account = QtWidgets.QWidget()
                self.tab_Account.setObjectName("tab_Account")
                self.account_heroImage = QtWidgets.QLabel(self.tab_Account)
                self.account_heroImage.setGeometry(QtCore.QRect(0, 0, 1051, 611))
                self.account_heroImage.setStyleSheet("background-image: url(:/Assets/assets/Account.jpg);")
                self.account_heroImage.setText("")
                self.account_heroImage.setObjectName("account_heroImage")
                self.account_changePassword = QtWidgets.QPushButton(self.tab_Account)
                self.account_changePassword.setGeometry(QtCore.QRect(830, 550, 211, 41))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(12)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.account_changePassword.setFont(font)
                self.account_changePassword.setStyleSheet("border: 2px solid white;\n"
                "border-radius: 5px;\n"
                "background-color: white;\n"
                "color: black;\n"
                "font-weight: bold;\n"
                "padding-bottom: 2px;\n"
                "")
                self.account_changePassword.setObjectName("account_changePassword")
                self.label_22 = QtWidgets.QLabel(self.tab_Account)
                self.label_22.setGeometry(QtCore.QRect(420, 50, 201, 131))
                self.label_22.setStyleSheet("image: url(:/Assets/assets/accountprofile.svg);")
                self.label_22.setObjectName("label_22")
                self.label_23 = QtWidgets.QLabel(self.tab_Account)
                self.label_23.setGeometry(QtCore.QRect(0, 150, 1051, 121))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.label_23.setFont(font)
                self.label_23.setStyleSheet("")
                self.label_23.setObjectName("label_23")
                self.line_5 = QtWidgets.QFrame(self.tab_Account)
                self.line_5.setGeometry(QtCore.QRect(330, 260, 391, 16))
                self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
                self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
                self.line_5.setObjectName("line_5")
                self.account_username_2 = QtWidgets.QLabel(self.tab_Account)
                self.account_username_2.setGeometry(QtCore.QRect(320, 390, 441, 31))
                self.account_username_2.setStyleSheet("border: 1px solid white;\n"
                "border-radius: 5px;\n"
                "background-color: white;")
                self.account_username_2.setObjectName("account_username_2")
                self.account_email_2 = QtWidgets.QLabel(self.tab_Account)
                self.account_email_2.setGeometry(QtCore.QRect(320, 330, 441, 31))
                self.account_email_2.setStyleSheet("border: 1px solid white;\n"
                "border-radius: 5px;\n"
                "background-color: white;")
                self.account_email_2.setObjectName("account_email_2")
                self.label_16 = QtWidgets.QLabel(self.tab_Account)
                self.label_16.setGeometry(QtCore.QRect(320, 430, 61, 16))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.label_16.setFont(font)
                self.label_16.setStyleSheet("color: white;")
                self.label_16.setObjectName("label_16")
                self.label_24 = QtWidgets.QLabel(self.tab_Account)
                self.label_24.setGeometry(QtCore.QRect(320, 310, 51, 16))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.label_24.setFont(font)
                self.label_24.setStyleSheet("color: white;")
                self.label_24.setObjectName("label_24")
                self.label_8 = QtWidgets.QLabel(self.tab_Account)
                self.label_8.setGeometry(QtCore.QRect(320, 370, 71, 16))
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(10)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.label_8.setFont(font)
                self.label_8.setStyleSheet("color: white;")
                self.label_8.setObjectName("label_8")
                self.account_email_3 = QtWidgets.QLabel(self.tab_Account)
                self.account_email_3.setGeometry(QtCore.QRect(320, 450, 441, 31))
                self.account_email_3.setStyleSheet("border: 1px solid white;\n"
                "border-radius: 5px;\n"
                "background-color: white;")
                self.account_email_3.setObjectName("account_email_3")
                self.tabWidget.addTab(self.tab_Account, "")
                self.logoutBtn = QtWidgets.QPushButton(self.centralwidget)
                self.logoutBtn.setGeometry(QtCore.QRect(870, 0, 183, 25))
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.logoutBtn.sizePolicy().hasHeightForWidth())
                self.logoutBtn.setSizePolicy(sizePolicy)
                font = QtGui.QFont()
                font.setFamily("Raleway")
                font.setPointSize(8)
                font.setBold(True)
                font.setWeight(75)
                self.logoutBtn.setFont(font)
                self.logoutBtn.setStyleSheet("background-color: rgb(40, 170, 112);\n"
                "background-color:#536DFE;\n"
                "color: rgb(255, 255, 255);")
                self.logoutBtn.setIconSize(QtCore.QSize(16, 16))
                self.logoutBtn.setObjectName("logoutBtn")
                self.welcomeTitle = QtWidgets.QLabel(self.centralwidget)
                self.welcomeTitle.setGeometry(QtCore.QRect(670, 0, 191, 22))
                font = QtGui.QFont()
                font.setFamily("Raleway SemiBold")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.welcomeTitle.setFont(font)
                self.welcomeTitle.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
                self.welcomeTitle.setObjectName("welcomeTitle")
                MainWindow.setCentralWidget(self.centralwidget)
                self.statusbar = QtWidgets.QStatusBar(MainWindow)
                self.statusbar.setObjectName("statusbar")
                MainWindow.setStatusBar(self.statusbar)

                self.retranslateUi(MainWindow)
                self.tabWidget.setCurrentIndex(0)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

                # button assignment
                # Search tab
                self.home_searchBtn.clicked.connect(lambda: self.tabWidget.setCurrentIndex(1))

                # Fines tab
                self.home_finesBtn.clicked.connect(lambda: self.tabWidget.setCurrentIndex(2))

                # Borrow tab
                self.home_borrowBtn.clicked.connect(lambda: self.tabWidget.setCurrentIndex(3))

                # Account tab
                self.home_accountBtn.clicked.connect(lambda: self.tabWidget.setCurrentIndex(5))

                # Search advance button
                self.search_advancedBtn.clicked.connect(lambda: self.advance_search_button())

                # Search simple search button
                self.search_searchBtn.clicked.connect(lambda: self.simple_search_button())

                # Logout button
                self.logoutBtn.clicked.connect(lambda: self.loggingout())

                # Reserve table row click
                self.reservationTable.cellClicked.connect(lambda: self.reserve_row_clicked())

                # Reserve table row double click
                self.reservationTable.cellDoubleClicked.connect(lambda: self.reserve_row_double_clicked())

                # Cancel reserve button
                self.reservation_cancelReservation.clicked.connect(lambda: self.reserve_cancel())

                # Borrow table row click
                self.borrowTable.cellClicked.connect(lambda: self.borrow_row_clicked())

                # Borrow table row double click
                self.borrowTable.cellDoubleClicked.connect(lambda: self.borrow_row_double_clicked())

                # Return book button
                self.return_book.clicked.connect(lambda: self.return_book_by_row())

                # Extend book button
                self.extend_due_date.clicked.connect(lambda: self.extend_book_by_row())

                # Make payment button
                self.payment_makePayment.clicked.connect(lambda: self.payment_button())

                # Change password button
                self.account_changePassword.clicked.connect(lambda: self.change_password(self.emailid))

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabHome), _translate("MainWindow", "Home"))
                self.search_searchBtn.setText(_translate("MainWindow", "Search"))
                self.label_3.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; font-weight:600; color:#ffffff;\">Book Search</span></p></body></html>"))
                self.search_title.setPlaceholderText(_translate("MainWindow", "   Search for a book (e.g. Android)"))
                self.groupBox_5.setTitle(_translate("MainWindow", "Advance_Search"))
                self.label_11.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#ffffff;\">ISBN</span></p></body></html>"))
                self.label_10.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#ffffff;\">Year of Publication</span></p></body></html>"))
                self.label_5.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#ffffff;\">Categories</span></p></body></html>"))
                self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#ffffff;\">Authors</span></p></body></html>"))
                self.search_advancedBtn.setText(_translate("MainWindow", "Advanced"))
                self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_Search), _translate("MainWindow", "Search"))
                self.label_21.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; color:#ffffff;\">Fines &amp; Payment</span></p></body></html>"))
                self.payment_makePayment.setText(_translate("MainWindow", "Make Payment"))
                self.payment_totalOverdue.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:24pt;\">Total Overdue:</span></p></body></html>"))
                self.payment_totalOverdue_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:24pt;\">$0</span></p></body></html>"))
                self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_Fines), _translate("MainWindow", "Fines and Payment"))
                self.borrow_heroImage.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; font-weight:600; color:#ffffff;\">Books Borrowed</span></p></body></html>"))
                self.borrowTable.setSortingEnabled(False)
                item = self.borrowTable.horizontalHeaderItem(0)
                item.setText(_translate("MainWindow", "Book"))
                item = self.borrowTable.horizontalHeaderItem(1)
                item.setText(_translate("MainWindow", "Book Title"))
                item = self.borrowTable.horizontalHeaderItem(2)
                item.setText(_translate("MainWindow", "Author"))
                item = self.borrowTable.horizontalHeaderItem(3)
                item.setText(_translate("MainWindow", "ISBN"))
                item = self.borrowTable.horizontalHeaderItem(4)
                item.setText(_translate("MainWindow", "Due Date"))
                self.extend_due_date.setText(_translate("MainWindow", "Extend due date"))
                self.return_book.setText(_translate("MainWindow", "Return Book"))
                self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_Borrow), _translate("MainWindow", "Borrow"))
                self.reservationTable.setSortingEnabled(False)
                item = self.reservationTable.horizontalHeaderItem(0)
                item.setText(_translate("MainWindow", "Book"))
                item = self.reservationTable.horizontalHeaderItem(1)
                item.setText(_translate("MainWindow", "Book Title"))
                item = self.reservationTable.horizontalHeaderItem(2)
                item.setText(_translate("MainWindow", "Author"))
                item = self.reservationTable.horizontalHeaderItem(3)
                item.setText(_translate("MainWindow", "ISBN"))
                item = self.reservationTable.horizontalHeaderItem(4)
                item.setText(_translate("MainWindow", "Availability"))
                self.label_6.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; font-weight:600; color:#ffffff;\">Reservations</span></p></body></html>"))
                self.reservation_cancelReservation.setText(_translate("MainWindow", "Cancel Reservation"))
                self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_Reservations), _translate("MainWindow", "Reservations"))
                self.account_changePassword.setText(_translate("MainWindow", "Change Password"))
                self.label_22.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
                self.label_23.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:36pt; color:#ffffff;\">Profile</span></p></body></html>"))
                self.account_username_2.setText(_translate("MainWindow", "username"))
                self.account_email_2.setText(_translate("MainWindow", "email"))
                self.label_16.setText(_translate("MainWindow", "Password"))
                self.label_24.setText(_translate("MainWindow", "Email"))
                self.label_8.setText(_translate("MainWindow", "Username"))
                self.account_email_3.setText(_translate("MainWindow", "password"))
                self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_Account), _translate("MainWindow", "Account"))
                self.logoutBtn.setText(_translate("MainWindow", "Logout"))
                welcome = "Welcome, " + self.name
                self.welcomeTitle.setText(_translate("MainWindow", welcome))

        # Button functions
        def load_fines(self,useremail):
                # Mysql data load
                my_cursor.execute("SELECT fe.amount 'Amount' FROM fine fe WHERE fe.userId = %s;",(useremail,))
                rows = my_cursor.fetchall()
                if rows == []:
                        amount = "$0"
                else:
                        amount = "$" + str(rows[0][0])

                #Display
                self.payment_totalOverdue_2.setText(amount)

        def load_borrow_books(self,useremail):
                # Mysql data load
                my_cursor.execute("SELECT bk.bookId 'Book ID', bk.title 'Title', bk.authors 'Authors', bk.isbn 'ISBN', bw.dueDate 'Due Date'" \
                "FROM Book bk RIGHT JOIN Borrow bw USING (bookID) WHERE bw.userId = %s;",(useremail,))
                rows = my_cursor.fetchall()

                #Display
                self.borrowTable.setRowCount(0)
                for row_number, row_data in enumerate(rows):
                        self.borrowTable.insertRow(row_number)
                        for col_num, data in enumerate(row_data):
                                if col_num == 2:
                                        end = len(data) - 1
                                        data  = data[1:end]
                                self.borrowTable.setItem(row_number, col_num, QtWidgets.QTableWidgetItem(str(data)))

                # Table Formatting
                header = self.borrowTable.horizontalHeader()
                header.setDefaultAlignment(QtCore.Qt.AlignCenter)
                header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
                header.setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
                header.setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)
                header.setSectionResizeMode(3, QtWidgets.QHeaderView.Stretch)
                header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)
                self.borrowTable.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)

        def load_reservations(self,useremail):
                # Check any overdue books
                if self.test_overdue_books(self.emailid):
                        my_cursor.execute('DELETE FROM Reserve WHERE userId = %s;',(self.emailid,))
                        my_db.commit()
                # Mysql data load
                my_cursor.execute('SELECT bk.bookId "Book ID", bk.title "Title", bk.authors "Authors", bk.isbn "ISBN", '
                                  'IF(EXISTS (SELECT * FROM borrow bw WHERE bk.bookId = bw.bookId), "No", "Yes") AS "Availability" '
                                  'FROM Book bk RIGHT JOIN Reserve re USING (bookID) WHERE re.userId = %s;',(useremail,))
                rows = my_cursor.fetchall()

                #Display
                self.reservationTable.setRowCount(0)
                for row_number, row_data in enumerate(rows):
                        self.reservationTable.insertRow(row_number)
                        for col_num, data in enumerate(row_data):
                                if col_num == 2:
                                        end = len(data) - 1
                                        data  = data[1:end]
                                self.reservationTable.setItem(row_number, col_num, QtWidgets.QTableWidgetItem(str(data)))

                # Table Formatting
                header = self.reservationTable.horizontalHeader()
                header.setDefaultAlignment(QtCore.Qt.AlignCenter)
                header.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
                header.setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
                header.setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)
                header.setSectionResizeMode(3, QtWidgets.QHeaderView.Stretch)
                header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)
                self.reservationTable.setEditTriggers(QtWidgets.QTableWidget.NoEditTriggers)

        def load_account_details(self,useremail):
                # Load mysql data
                my_cursor.execute("SELECT * FROM ils.libraryuser WHERE userID = %s", (useremail,))
                rows = my_cursor.fetchall()

                # Display
                self.account_email_2.setText(rows[0][0])
                self.account_username_2.setText(rows[0][1])
                self.account_email_3.setText(rows[0][2])

        def loggingout(self):
                self.loginWindow.show()
                self.MainWindow.close()

        def advance_search_button(self):
                if self.advance_indicator == False:
                        self.advance_indicator = True
                        self.groupBox_5.show()
                else:
                        self.advance_indicator = False
                        self.groupBox_5.hide()

        def simple_search_button(self):
                if self.advance_indicator == False:
                        if str(self.search_title.text()) == "":
                                self.error_popup_no_input()
                                return
                        texts = simple_search(str(self.search_title.text()))
                        if texts == []:
                                self.error_popup_no_result()
                        else:
                                allbookids = []
                                for i in texts:
                                        allbookids.append(i[0])
                                allauthors = extract_authors(allbookids)
                                allisbn = extract_isbn(allbookids)
                                allthumbnailurl = extract_thumbnailUrl(allbookids)
                                for i in range(len(texts)):
                                        texts[i].append(allisbn[i][1])
                                        texts[i].append(allauthors[i][1])
                                words = texts
                                images = []
                                for i in allthumbnailurl:
                                        images.append(str(i[1]))
                                my_cursor.execute(
                                        'SELECT bk.bookId "Book ID", IF(EXISTS(SELECT * FROM Borrow bw WHERE bw.bookID = bk.bookID) '
                                        'OR bk.outOfCirculation = 1, "No", "Yes") AS "Availability" FROM Book bk;')
                                availability = my_cursor.fetchall()
                                for i in words:
                                        for t in availability:
                                                if i[0] == t[0]:
                                                        i.append(t[1])
                                                        break
                                my_cursor.execute('SELECT bookId "Book ID", dueDate "Due Date" FROM Borrow;')
                                rows = my_cursor.fetchall()
                                for i in words:
                                        for t in range(len(rows)):
                                                if str(i[0]) == str(rows[t][0]):
                                                        i.append(str(rows[t][1])[:10])
                                                        break
                                                elif t == (len(rows) - 1):
                                                        i.append("NIL")

                                result = []
                                for i in range(len(words)):
                                        result.append([images[i][64:],] + words[i])
                                self.window = QtWidgets.QMainWindow()
                                searchresults(self.window, result, self.emailid, self)
                                self.MainWindow.hide()
                else:
                        if self.search_author.text() == "" and self.search_category.text() == "" \
                                and self.search_title.text() == "" and self.search_year.text() == "" and self.search_isbn.text() == "":
                                self.error_fill_fields()
                        else:
                                texts = advance_search(self.create_search_dictionary())
                                if texts == []:
                                        self.error_popup_no_result()
                                else:
                                        allbookids = []
                                        for i in texts:
                                                allbookids.append(i[0])
                                        allauthors = extract_authors(allbookids)
                                        allisbn = extract_isbn(allbookids)
                                        allthumbnailurl = extract_thumbnailUrl(allbookids)
                                        for i in allisbn:
                                                if len(i) == 1:
                                                        i.append('nan')
                                        for i in allthumbnailurl:
                                                if len(i) == 1:
                                                        i.append('nan')
                                        for i in range(len(texts)):
                                                texts[i].append(allisbn[i][1])
                                                texts[i].append(allauthors[i][1])
                                        words = texts
                                        images = []
                                        for i in allthumbnailurl:
                                                images.append(str(i[1]))
                                        my_cursor.execute(
                                                'SELECT bk.bookId "Book ID", IF(EXISTS(SELECT * FROM Borrow bw WHERE bw.bookID = bk.bookID) '
                                                'OR bk.outOfCirculation = 1, "No", "Yes") AS "Availability" FROM Book bk;')
                                        availability = my_cursor.fetchall()
                                        for i in words:
                                                for t in availability:
                                                        if i[0] == t[0]:
                                                                i.append(t[1])
                                                                break
                                        my_cursor.execute('SELECT bookId "Book ID", dueDate "Due Date" FROM Borrow;')
                                        rows = my_cursor.fetchall()
                                        for i in words:
                                                for t in range(len(rows)):
                                                        if str(i[0]) == str(rows[t][0]):
                                                                i.append(str(rows[t][1])[:10])
                                                                break
                                                        elif t == (len(rows) - 1):
                                                                i.append("NIL")

                                        result = []
                                        for i in range(len(words)):
                                                result.append([images[i][64:], ] + words[i])
                                        self.window = QtWidgets.QMainWindow()
                                        searchresults(self.window, result, self.emailid, self)
                                        self.MainWindow.hide()

        def reserve_row_clicked(self):
                self.reservedtable_clicked = True
                indexes = self.reservationTable.selectionModel().selectedRows()
                for index in sorted(indexes):
                        row = index.row()
                        rowtext = []
                        for column in range(self.reservationTable.columnCount()):
                                rowtext.append(self.reservationTable.item(row, column).text())
                self.rowbookid_reserve = rowtext[0]

        def reserve_row_double_clicked(self):
                indexes = self.reservationTable.selectionModel().selectedRows()
                for index in sorted(indexes):
                        row = index.row()
                        rowtext = []
                        for column in range(self.reservationTable.columnCount()):
                                rowtext.append(self.reservationTable.item(row, column).text())
                        self.window = QtWidgets.QMainWindow()
                        bookresult(self.window, rowtext[0], self.emailid, self,True)

        def reserve_cancel(self):
                if self.reservedtable_clicked == False:
                        self.error_book_select()
                else:
                        reserve_book_id = self.rowbookid_reserve
                        my_cursor.execute("DELETE FROM Reserve WHERE userId = %s AND bookId = %s;",(self.emailid,reserve_book_id))
                        my_db.commit()
                        self.load_reservations(self.emailid)
                self.reservedtable_clicked = False

        def borrow_row_clicked(self):
                self.borrowtable_clicked = True
                indexes = self.borrowTable.selectionModel().selectedRows()
                for index in sorted(indexes):
                        row = index.row()
                        rowtext = []
                        for column in range(self.borrowTable.columnCount()):
                                rowtext.append(self.borrowTable.item(row, column).text())
                self.rowbookid_borrow = rowtext[0]

        def borrow_row_double_clicked(self):
                indexes = self.borrowTable.selectionModel().selectedRows()
                for index in sorted(indexes):
                        row = index.row()
                        rowtext = []
                        for column in range(self.borrowTable.columnCount()):
                                rowtext.append(self.borrowTable.item(row, column).text())
                        self.window = QtWidgets.QMainWindow()
                        bookresult(self.window, rowtext[0], self.emailid, self,True)

        def return_book_by_row(self):
                if self.borrowtable_clicked == False:
                        self.error_book_select()
                else:
                        borrow_book_id = self.rowbookid_borrow
                        my_cursor.execute("SELECT IF(CURRENT_TIMESTAMP - dueDate > 0, 'Yes', 'No') as 'OverDue' "
                                          "FROM borrow WHERE userId = %s and bookId = %s;"
                                          ,(self.emailid,borrow_book_id))
                        rows = my_cursor.fetchall()
                        if rows[0][0] == 'Yes':
                                my_cursor.execute("SELECT DATEDIFF(CURRENT_TIMESTAMP, dueDate) * 1 AS "
                                                  "'Fine Amount' FROM borrow WHERE "
                                                  "userId = %s and bookId = %s;",(self.emailid,borrow_book_id))
                                rows = my_cursor.fetchall()
                                amount = rows[0][0]
                                my_cursor.execute("SELECT amount FROM Fine WHERE userId = %s;",(self.emailid,))
                                rows = my_cursor.fetchall()
                                if rows == []:
                                        my_cursor.execute("INSERT INTO Fine (userId, amount) VALUES (%s, %s);",(self.emailid, amount))
                                        my_db.commit()
                                else:
                                        my_cursor.execute("UPDATE fine SET amount = amount + %s WHERE userId = %s;",(amount,self.emailid))
                                        my_db.commit()
                        my_cursor.execute("DELETE FROM Borrow WHERE userId = %s AND bookId = %s;",
                                          (self.emailid, borrow_book_id))
                        my_db.commit()
                        self.load_borrow_books(self.emailid)
                        self.load_fines(self.emailid)
                self.borrowtable_clicked = False

        def extend_book_by_row(self):
                if self.borrowtable_clicked == False:
                        self.error_book_select()
                elif self.test_overdue_books(self.emailid):
                        self.error_overdue_books()
                else:
                        extend_book_id = self.rowbookid_borrow
                        if self.test_book_reserved(extend_book_id):
                                self.error_reserved_book()
                        else:
                                my_cursor.execute("SELECT extendDueDate 'Extend Due Date' FROM Borrow "
                                                  "WHERE userId = %s AND bookId = %s;",(self.emailid, extend_book_id))
                                rows = my_cursor.fetchall()
                                if rows[0][0] == 0:
                                        my_cursor.execute("UPDATE Borrow SET extendDueDate = 1, dueDate = DATE_ADD(dueDate, interval 4 week) "
                                                          "WHERE userId = %s AND bookId = %s;",(self.emailid,extend_book_id))
                                        my_db.commit()
                                        self.load_borrow_books(self.emailid)
                                        self.notice_book_extended()
                                else:
                                        self.error_book_already_extended()
                self.borrowtable_clicked = False

        def payment_button(self):
                if self.payment_totalOverdue_2.text()[1:] == '0':
                        self.error_popup_no_fines()
                else:
                        self.window = QtWidgets.QMainWindow()
                        makepayment(self.window,self.payment_totalOverdue_2.text()[1:],self.emailid,self.loginWindow,self)
                        self.MainWindow.hide()

        def change_password(self,useremail):
                self.window = QtWidgets.QMainWindow()
                changepassword(self.window, useremail,self)

        # Miscellaneous
        def get_username(self,useremail):
                # Load mysql data
                my_cursor.execute("SELECT * FROM ils.libraryuser WHERE userID = %s", (useremail,))
                rows = my_cursor.fetchall()
                return rows[0][1]

        def error_popup_no_fines(self):
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText("No fines found")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.exec_()

        def error_popup_no_result(self):
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText("No results found")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.exec_()

        def error_popup_no_input(self):
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText("Please type your search")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.exec_()

        def error_book_already_extended(self):
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText("The book has already been extended")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.exec_()

        def error_book_select(self):
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText("Please select a book")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.exec_()

        def error_fill_fields(self):
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Error")
                msg.setText("Please fill in any field")
                msg.setIcon(QtWidgets.QMessageBox.Critical)
                msg.exec_()

        def error_overdue_books(self):
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Book")
                msg.setText("You have Overdue books")
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.exec_()

        def error_reserved_book(self):
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Book")
                msg.setText("The book has been reserved and cannot be extended")
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.exec_()

        def notice_book_extended(self):
                msg = QtWidgets.QMessageBox()
                msg.setWindowTitle("Book")
                msg.setText("The book has been successfully extended")
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.exec_()

        def create_search_dictionary(self):
                # define variable
                if "()" not in self.search_title.text():
                        if "(" or ")" in self.search_title.text():
                                new_text = ""
                                for i in range(len(self.search_title.text())):
                                        if self.search_title.text()[i] == "(" or self.search_title.text()[i] == ")":
                                                continue
                                        else:
                                                new_text += self.search_title.text()[i]
                                search_title = new_text
                        else:
                                search_title = self.search_title.text()
                else:
                        search_title = self.search_title.text()
                search_author = self.search_author.text()
                search_category = self.search_category.text()
                search_isbn = self.search_isbn.text()
                search_year = self.search_year.text()
                search_dictionary = {}
                # title
                if search_title:
                        search_dictionary["title"] = search_title.split()

                # authors
                if search_author:
                        search_dictionary["authors"] = search_author.split()

                # categories
                if search_category:
                        search_dictionary["categories"] = search_category.split()

                # isbn
                if search_isbn:
                        search_dictionary["isbn"] = search_isbn

                # year
                if search_year:
                        search_dictionary["year"] = search_year

                return search_dictionary

        def test_overdue_books(self, useremail):
                # Mysql data load
                my_cursor.execute(
                        "SELECT userId 'User ID' FROM Borrow WHERE userId = %s AND dueDate < CURRENT_TIMESTAMP;",
                        (useremail,))
                rows = my_cursor.fetchall()
                if rows != []:
                        return True
                else:
                        return False

        def test_book_reserved(self, book):
                my_cursor.execute("SELECT userId 'User ID' FROM Reserve WHERE bookId = %s;", (book,))
                rows = my_cursor.fetchall()
                if rows != []:
                        return True
                else:
                        return False


import background_image



